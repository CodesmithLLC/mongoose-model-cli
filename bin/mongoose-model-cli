#!/usr/bin/env node

var fs = require('fs');
var exec = require('child_process').exec;
var colors = require('colors');
var ejs = require('ejs');

var root = __dirname + '/../';

// add methods to the console for each of the styles in the colors library
// e.g. console.green('hello', 'world')
for (var style in colors.styles) {
  console[style] = function(color) {
    var args = [].slice.call(arguments, 1);
    var styledStrings = args.map(str => JSON.stringify(str)[color]);
    console.log.apply(this, styledStrings);
  }.bind(console, style);
}

/* all color options:
 * black, red, green, yellow, blue, magenta, cyan, white, gray, grey
 * bgBlack, bgRed, bgGreen, bgYellow, bgBlue, bgMagenta, bgCyan, bgWhite
 * reset, bold, dim, italic, underline, inverse, hidden, strikethrough
 */


// method to convert to pascal-case
String.prototype.pascal = function() {
  return this.replace(/^([a-z])/, let => let.toUpperCase())
             .replace(/[\-\_][a-zA-Z]/,  let => let[1].toUpperCase());
}


var commands = { help, init, seed, drop, setUri };

function init() {
  var dir = fs.readdirSync('./');
  var modelDir = dir.indexOf('models');
  if (modelDir !== -1) return;
  fs.mkdirSync('./models');
  fs.mkdirSync('./models/seed');
  fs.mkdirSync('./models/migrations');
  setUri('');
  fs.createReadStream(root + 'templates/seedfile.js').pipe(fs.createWriteStream('models/seed/seedfile.js'));
  fs.createReadStream(root + 'templates/dropfile.js').pipe(fs.createWriteStream('models/seed/dropfile.js'));
}

function seed() {
  exec('node ./models/seed/seedfile.js', function(err, stdout, stderr) {
    if (err) console.error(err);
    else console.log(stdout);
  });
}

function drop() {
  var command = 'node ./models/seed/dropfile.js ';
  var args = [].map.call(arguments, name => name.pascal()).join(' ');
  exec(command + args, function(err, stdout, stderr) {
    if (err) console.error(err);
    else console.log(stdout);
  });
}

function setUri(uri) {
  var file = ejs.render(fs.readFileSync(root + 'templates/connection-string.ejs', 'utf-8'), { uri });
  fs.writeFileSync('models/connection-string.js', file);
}


commands.create = commands.generate = commands.g = { model, migration };

function model(name) {
  if (!name) return console.bgRed('Must supply a name for the model.');
  name = name.pascal();
  var attrs = [].slice.call(arguments, 1);
  attrs = parseAttrs(attrs);

  commands.init();
  console.cyan(`Creating new model: ${name}`);

  var file = ejs.render(fs.readFileSync(root + 'templates/model.ejs', 'utf-8'), { name, attrs });

  fs.writeFileSync(`models/${name}.js`, file);
  console.green(name + ' was successfully created!');
}


function migration(name) {
  if (!name) return console.red('You must specify the model for this migration');
  name = name.pascal();
  var models = fs.readdirSync('./models');
  var modelInd = models.indexOf(name + '.js');
  if (modelInd === -1) 
    return console.red('You have yet to create a model: ' + name);

  console.cyan('Creating a migration file for: ' + name);
  var file = ejs.render(fs.readFileSync(root + 'templates/migration.ejs', 'utf-8'), { name });

  fs.writeFileSync(`models/migrations/${name}-${Date.now()}.js`, file);
  console.green(`Migration for ${name} was successfully created!`);
}

function parseAttrs(attrs) {
  attrs = attrs.reduce((obj, pair) => {
    pair = pair.split(':');
    obj[pair[0]] = pair[1].pascal();
    return obj;
  }, {});

  for (var attr in attrs) {
    var dataType = attrs[attr];
    if (dataType.slice(0, 2) === 'Id') {
      attrs[attr] = `Schema.Types.ObjectId, ref: '${dataType.slice(2)}'`;
    } 
    else if (dataType === 'Mixed') {
      attrs[attr] = `Schema.Types.Mixed`;
    }
    else if (!global[dataType]) {
      return console.bgRed('Invalid data type ' + dataType);
    }
  }
  return attrs;
}


var command = process.argv[2];
var type = process.argv[3];


try {
  var args = process.argv.slice(3);
  if (typeof commands[command] === 'object') {
    args = process.argv.slice(4);
    commands[command][type].apply(this, args);
  } else
    commands[command].apply(this, args);
} catch(err) {
  if (Object.keys(err).length) console.bgRed(err);
  commands.help.apply(this, args);
}

module.exports = commands

function help(command) {
  switch(command) {
    default: 
      console.log(`\

${'Welcome to mongoose-model-cli!'.yellow}

${'Commands'.blue.underline}
${'help:'.cyan}  Provides details for a command
${'init:'.cyan}  Generates directory structure
${'setUri:'.cyan}  Sets the connection string for connecting to MongoDB
${'seed:'.cyan}  Runs the seed file in ./models/seed
${'drop:'.cyan}  Drops some or all of the collections
${'generate:'.cyan}  Creates a model or migration file

For more info try ${'"mongoose help generate"'.green}
\
      `);
  }
}