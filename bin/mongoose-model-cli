#!/usr/bin/env node

var colors = require('colors');


// add methods to the console for each of the styles in the colors library
// e.g. console.green('hello', 'world')
for (var style in colors.styles) {
  console[style] = function(color) {
    var args = [].slice.call(arguments, 1);
    var styledStrings = args.map(str => JSON.stringify(str)[color]);
    console.log.apply(this, styledStrings);
  }.bind(console, style);
}

/* all color options:
 * black, red, green, yellow, blue, magenta, cyan, white, gray, grey
 * bgBlack, bgRed, bgGreen, bgYellow, bgBlue, bgMagenta, bgCyan, bgWhite
 * reset, bold, dim, italic, underline, inverse, hidden, strikethrough
 */


// method to convert to pascal-case
String.prototype.pascal = function() {
  return this.replace(/^([a-z])/, let => let.toUpperCase())
             .replace(/[\-\_][a-zA-Z]/,  let => let[1].toUpperCase());
}


var help = require('../commands/help');
var shell = require('../commands/shell').shell;
var mshell = require('../commands/shell').mshell;
var init = require('../commands/init');
var seed = require('../commands/seed');
var drop = require('../commands/drop');
var setUri = require('../commands/setUri');

var commands = { help, init, seed, drop, setUri, shell, mshell };

var model = require('../commands/model');
var migration = require('../commands/migration');

commands.create = commands.generate = commands.g = { model, migration, parent: commands };



if (!module.parent) {

  var command = process.argv[2];
  var type = process.argv[3];

  try {
    var args = process.argv.slice(3);
    if (typeof commands[command] === 'object') {
      args = process.argv.slice(4);
      var func = commands[command][type];
      if (!func) return console.red(`Command ${type} doesn't exist.`);
      commands[command][type].apply(commands[command], args);
    } else
      commands[command].apply(commands, args);
  } catch(err) {
    if (Object.keys(err).length) console.bgRed(err);
    commands.help.apply(commands, args);
  }
}

module.exports = commands

