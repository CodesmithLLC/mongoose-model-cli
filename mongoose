#!/usr/local/bin/node

var fs = require('fs');
var Promise = require('bluebird');
var exec = Promise.promisify(require('child_process').exec);
var colors = require('colors');

// add methods to the console for each of the styles in the colors library
// e.g. console.green('hello', 'world')
for (var style in colors.styles) {
  console[style] = function(color) {
    var args = [].slice.call(arguments, 1);
    var styledStrings = args.map(str => str[color] || JSON.stringify(str)[color]);
    console.log.apply(this, styledStrings);
  }.bind(console, style);
}

// method to capitalize first letter of a string
String.prototype.cap = function() {
  return this.slice(0, 1).toUpperCase() + this.slice(1).toLowerCase();
}


var command = process.argv[2];
var type = process.argv[3];
var name = process.argv[4];
var attrs = process.argv.slice(5);
attrs = attrs.reduce((obj, pair) => {
  pair = pair.split(':');
  obj[pair[0]] = pair[1].cap();
  return obj;
}, {});


if (command === 'create' && type === 'model') {
  console.cyan(`Creating new model: ${name.cap()}`);
  try { fs.mkdirSync('./models'); } catch(err) {};

  var file = `\
var mongoose = require('mongoose');
var Schema = mongoose.Schema;

var newSchema = new Schema({
`;

  for (var attr in attrs) {
    var dataType = attrs[attr];
    if (dataType === 'Id') {
      dataType = 'Schema.Types.ObjectId'
    } 
    else if (!global[dataType]) {
      return console.bgRed('Invalid data type ' + dataType);
    }
    file += `  '${attr}': { type: ${dataType} },\n`
  }

  file += `\
});

module.exports = mongoose.model('${name.cap()}', newSchema);
`;

  fs.writeFile(`models/${name}.js`, file, err => {
    if (err) console.red(err);
    else console.green(name.cap() + ' was successfully created!');
  });
}

if (command === 'test') {
  exec('echo lol >&2')
  .then((stdout, stderr, a, b) => {
    console.log('stdout', stdout)
    console.log('stderr', stderr)
    console.log(a, b);
  })
  .catch(console.error);
}